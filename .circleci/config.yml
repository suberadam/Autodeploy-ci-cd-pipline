version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID}
                      aws cloudformation delete-stack \
                        --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                      aws cloudformation delete-stack \
                        --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar
      - run: yum -y install gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
             aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
               --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
               --tags project=udapeople 
              
           
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


      
  configure-infrastructure:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2e:cb:08:38:54:52:eb:cf:23:57:7e:60:2d:46:1b:8f:6f:ea:5f:43"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            pip install awscli
      - run: cat ./.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
            sudo npm install pm2 -g
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm install 
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/L5b8qvRkURyVCR78fRefzx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi 
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest
    steps:
      - checkout 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Build frontend
          command: |
            cd frontend
            ls -la
            cat .env
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure    
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
                    
  deploy-backend:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2e:cb:08:38:54:52:eb:cf:23:57:7e:60:2d:46:1b:8f:6f:ea:5f:43"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        #Checkout code from git
        - run:
                  name: Get old stack workflow id
                  command: |
                      OLD_WORKFLOW_ID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text)
                      echo
                      echo "Old workflow Id that will be deleted: $OLD_WORKFLOW_ID"
                      echo
                      export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
        - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]